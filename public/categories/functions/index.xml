<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Functions on Joseph T Powers</title>
    <link>/categories/functions/</link>
    <description>Recent content in Functions on Joseph T Powers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 17 Nov 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/functions/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Write clearer custom functions in R using quasiquotation</title>
      <link>/post/write-clearer-custom-functions-in-r-using-quasiquotation/</link>
      <pubDate>Sat, 17 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/write-clearer-custom-functions-in-r-using-quasiquotation/</guid>
      <description>TLDR You can utilize dplyr verbs in your custom functions if you know when to use quasiquotation functions within your custom functions. This post demonstrates standard use cases for quasiquotation functions enquo() &amp;amp; !!, enquos() &amp;amp; !!!, quo_name() and the helper function :=, which is godsend for creating new variables with custom functions.
 Why use quasiquotation? Iâ€™ll assume that readers of this post rely on dplyr &amp;amp; tidyr for data manipulation, but have experienced some frustration when trying to turn their best data manipulation scripts into custom functions that rely on dplyr and tidyr verbs.</description>
    </item>
    
  </channel>
</rss>